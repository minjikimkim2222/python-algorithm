# 1. 리스트 선언 -> 빈 리스트 선언 / 초기값 가진 리스트로 선언
a = list()
a2 = []

a = [1, 2, 3]

# 2. 요소 추가 -> append, insert
a.append(5) ## [1, 2, 3, 5]
a.insert(1, 7) ## [1, 7, 2, 3, 5]

# 3. list의 값 가져오기 -> 인덱스 지정, 슬라이싱(slicing)
print(a[2]) ## 2

print(a[1 : 3]) ## [7, 2]
print(a[:3]) ## [1, 7, 2] -- 시작인덱스 생략
print(a[3:]) ## [3, 5] -- 종료인덱스 생략
print(a[0: len(a): 2]) ## [1, 2, 5] -- 짝수번째 인덱스만 (세번째 파라미터는 step으로, 두 칸씩 건너뛰게 됨)
print(len(a)) ## 5
print(a[1: len(a): 2]) ## [7, 3] -- 홀수번째 인덱스만 출력

# 4. 리스트에서 요소 삭제 -> 인덱스로 삭제(del), 값으로 삭제(remove(), pop()
print(a) ## [1, 7, 2, 3, 5]
del a[1]
print(a) ## [1, 2, 3, 5]

a.remove(2)
print(a) ## [1, 3, 5] -- 주의!! 인덱스가 아닌 특정 '값'에 해당하는 요소 삭제

ret_a = a.pop()
print(ret_a) ## 5
print(a) ## [1, 3]

# 참고. 파이썬의 리스트는 연결리스트에 대한 포인터 목록을 관리하기에,
# 정수/문자/불리언 등, 제각기 다양한 타입을 동시에 단일리스트에서 관리하는 것이 가능해진다
a = [1, '안녕', True, set([1,3,4]), [4,5]]
